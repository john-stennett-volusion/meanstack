{"version":3,"sources":["api-tests.js"],"names":[],"mappings":"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","file":"api-tests-compiled.js","sourcesContent":["'use strict';\n\nlet assert     = require('assert');\nlet express    = require('express');\nlet superagent = require('superagent');\nlet wagner     = require('wagner-core');\n\nconst URL_ROOT = 'http://localhost:3000';\n\ndescribe('Category API', () => {\n\tlet server;\n\tlet Category;\n\tlet Product;\n\tlet models;\n\n\tbefore(() => {\n\t\tlet app = express();\n\n\t\t// Bootstrap the Server\n\t\tmodels = require('../models')(wagner);\n\t\tapp.use(require('../api')(wagner));\n\n\t\tserver = app.listen(3000);\n\n\t\t// Make Category model available in tests.\n\t\tCategory = models.Category;\n\t\tProduct  = models.Product;\n\t});\n\n\tafter(() => {\n\t\t// Shut the server down when we're done.\n\t\tserver.close();\n\t});\n\n\tbeforeEach((done) => {\n\t\t// Make sure Categories are empty before each test.\n\t\tCategory.remove({}, (err) => {\n\t\t\tassert.ifError(err);\n\t\t\tProduct.remove({}, (err) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t});\n\t\t\tdone();\n\t\t});\n\t});\n\n\tit('can load a category by id', (done) => {\n\t\t// Create a single category.\n\t\tCategory.create({ _id: 'Electronics' }, (err, doc) => {\n\t\t\tassert.ifError(err);\n\n\t\t\tlet url = `${URL_ROOT}/category/id/Electronics`;\n\n\t\t\t// Make an HTTP request to localhost:3000/category/id/Electronics.\n\t\t\tsuperagent.get(url, (err, res) => {\n\t\t\t\tassert.ifError(err);\n\t\t\t\tlet result;\n\n\t\t\t\t// And make sure we got { _id: 'Electronics' } back.\n\t\t\t\tassert.doesNotThrow(() => {\n\t\t\t\t\tresult = JSON.parse(res.text);\n\t\t\t\t});\n\t\t\t\tassert.ok(result.category);\n\t\t\t\tassert.equal(result.category._id, 'Electronics');\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\tit('can load all categories that have a certain parent', (done) => {\n\t\tlet categories = [\n\t\t\t{ _id: 'Electronics' },\n\t\t\t{ _id: 'Phones', parent: 'Electronics' },\n\t\t\t{ _id: 'Laptops', parent: 'Electronics' },\n\t\t\t{ _id: 'Bacon' }\n\t\t];\n\n\t\t// Create 4 Categories\n\t\tCategory.create(categories, (err, categories) => {\n\t\t\tassert.ifError(err);\n\t\t\tlet url = `${URL_ROOT}/category/parent/Electronics`;\n\n\t\t\t// Make an HTTP request to localhost:3000/category/parent/Electronics.\n\t\t\tsuperagent.get(url, (err, res) => {\n\t\t\t\tassert.ifError(err);\n\n\t\t\t\tlet result;\n\t\t\t\tassert.doesNotThrow(() => {\n\t\t\t\t\tresult = JSON.parse(res.text);\n\t\t\t\t});\n\t\t\t\tassert.equal(result.categories.length, 2);\n\n\t\t\t\t// Should be in ascending order by _id.\n\t\t\t\tassert.equal(result.categories[0]._id, 'Laptops');\n\t\t\t\tassert.equal(result.categories[1]._id, 'Phones');\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\tit('can load a product by id', (done) => {\n\t\t// Create a single Product\n\t\tconst PRODUCT_ID = '000000000000000000000001';\n\t\tlet product = {\n\t\t\tname: 'LG G4',\n\t\t\t_id: PRODUCT_ID,\n\t\t\tprice: {\n\t\t\t\tamount: 300,\n\t\t\t\tcurrency: 'USD'\n\t\t\t}\n\t\t};\n\n\t\tProduct.create(product, (error, doc) => {\n\t\t\tassert.ifError(error);\n\n\t\t\tlet url = `${URL_ROOT}/product/id/${PRODUCT_ID}`;\n\n\t\t\tsuperagent.get(url, (error, res) => {\n\t\t\t\tassert.ifError(error);\n\n\t\t\t\tlet result;\n\t\t\t\tassert.doesNotThrow(() => {\n\t\t\t\t\tresult = JSON.parse(res.text);\n\t\t\t\t});\n\n\t\t\t\tassert.ok(result.product);\n\t\t\t\tassert.equal(result.product._id, PRODUCT_ID);\n\t\t\t\tassert.equal(result.product.name, 'LG G4');\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\tit('can load all products in a category with sub-categories', (done) => {\n\t\tlet categories = [\n\t\t\t{ _id: 'Electronics' },\n\t\t\t{ _id: 'Phones', parent: 'Electronics' },\n\t\t\t{ _id: 'Laptops', parent: 'Electronics' },\n\t\t\t{ _id: 'Bacon' }\n\t\t];\n\n\t\tlet products = [\n\t\t\t{\n\t\t\t\tname: 'LG G$',\n\t\t\t\tcategory: {\n\t\t\t\t\t_id: 'Phones',\n\t\t\t\t\tancestors: ['Electronics', 'Phones']\n\t\t\t\t},\n\t\t\t\tprice: {\n\t\t\t\t\tamount: 300,\n\t\t\t\t\tcurrency: 'USD'\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: 'Asus Zenbook Prime',\n\t\t\t\tcategory: {\n\t\t\t\t\t_id: 'Laptop',\n\t\t\t\t\tancestors: ['Electronics', 'Laptops']\n\t\t\t\t},\n\t\t\t\tprice: {\n\t\t\t\t\tamount: 2000,\n\t\t\t\t\tcurrency: 'USD'\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tname: 'Flying Pigs Farm Pasture Raised Pork Bacon',\n\t\t\t\tcategory: {\n\t\t\t\t\t_id: 'Bacon',\n\t\t\t\t\tancestors: ['Bacon']\n\t\t\t\t},\n\t\t\t\tprice: {\n\t\t\t\t\tamount: 20,\n\t\t\t\t\tcurrency: 'USD'\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\t// Create 4 categories\n\t\tCategory.create(categories, (error, categories) => {\n\t\t\tassert.ifError(error);\n\n\t\t\t// And 3 products\n\t\t\tProduct.create(products, (error, products) => {\n\t\t\t\tassert.ifError(error);\n\n\t\t\t\tlet url = `${URL_ROOT}/product/category/Electronics`;\n\n\t\t\t\tsuperagent.get(url, (error, res) => {\n\t\t\t\t\tassert.ifError(error);\n\n\t\t\t\t\tlet result;\n\t\t\t\t\tassert.doesNotThrow(() => {\n\t\t\t\t\t\tresult = JSON.parse(res.text);\n\t\t\t\t\t});\n\t\t\t\t\tassert.equal(result.products.length, 2);\n\n\t\t\t\t\t// Should be in ascending order by name\n\t\t\t\t\tassert.equal(result.products[0].name, 'ASUS Zenbook Prime');\n\t\t\t\t\tassert.equal(result.products[1].name, 'LG G4');\n\n\t\t\t\t\t// Sort by price, ascending\n\t\t\t\t\tlet url = `${URL_ROOT}/Product/category/Electronics?price=1`;\n\t\t\t\t\tsuperagent.get(url, (error, res) => {\n\t\t\t\t\t\tassert.ifError(error);\n\n\t\t\t\t\t\tlet result;\n\t\t\t\t\t\tassert.doesNotThrow(() => {\n\t\t\t\t\t\t\tresult = JSON.parse(res.text);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tassert.equal(result.products.length, 2);\n\t\t\t\t\t\tassert.equal(result.products[0].name, 'LG G4');\n\t\t\t\t\t\tassert.equal(result.products[1].name, 'ASUS Zenbook Prime');\n\t\t\t\t\t\tdone();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n});"]}