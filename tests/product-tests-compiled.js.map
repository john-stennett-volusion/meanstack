{"version":3,"sources":["product-tests.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAa,QAAQ,QAAR,CAAjB;AACA,IAAI,UAAa,QAAQ,SAAR,CAAjB;AACA,IAAI,aAAa,QAAQ,YAAR,CAAjB;AACA,IAAI,SAAa,QAAQ,aAAR,CAAjB;;AAEA,MAAM,WAAW,uBAAjB;;AAEA,SAAS,aAAT,EAAwB,MAAM;AAC7B,KAAI,MAAJ;AACA,KAAI,OAAJ;;AAEA,QAAO,MAAM;AACZ,MAAI,MAAM,SAAV;;;AAGA,MAAI,SAAS,QAAQ,kBAAR,EAA4B,MAA5B,CAAb;AACA,MAAI,GAAJ,CAAQ,QAAQ,QAAR,EAAkB,MAAlB,CAAR;AACA,WAAS,IAAI,MAAJ,CAAW,IAAX,CAAT;;;AAGA,YAAW,OAAO,OAAlB;AACA,EAVD;;AAYA,OAAM,MAAM;;AAEX,SAAO,KAAP;AACA,EAHD;;AAKA,YAAY,IAAD,IAAU;;AAEpB,UAAQ,MAAR,CAAe,EAAf,EAAoB,GAAD,IAAS;AAC3B,UAAO,OAAP,CAAe,GAAf;AACA;AACA,GAHD;AAIA,EAND;;AAQA,IAAG,0BAAH,EAAgC,IAAD,IAAU;;AAExC,QAAM,aAAa,0BAAnB;AACA,MAAI,UAAU;AACb,SAAM,OADO;AAEb,QAAK,UAFQ;AAGb,UAAO;AACN,YAAQ,GADF;AAEN,cAAU;AAFJ;AAHM,GAAd;;AASA,UAAQ,MAAR,CAAe,OAAf,EAAwB,CAAC,KAAD,EAAQ,GAAR,KAAgB;AACvC,UAAO,OAAP,CAAe,KAAf;;AAEA,OAAI,MAAM,CAAA,AAAC,GAAE,QAAH,EAAY,YAAZ,GAA0B,UAA1B,EAAA,AAAqC,CAA/C;;AAEA,cAAW,GAAX,CAAe,GAAf,EAAoB,CAAC,KAAD,EAAQ,GAAR,KAAgB;AACnC,WAAO,OAAP,CAAe,KAAf;;AAEA,QAAI,MAAJ;AACA,WAAO,YAAP,CAAoB,MAAM;AACzB,cAAS,KAAK,KAAL,CAAW,IAAI,IAAf,CAAT;AACA,KAFD;;AAIA,WAAO,EAAP,CAAU,OAAO,OAAjB;AACA,WAAO,KAAP,CAAa,OAAO,OAAP,CAAe,GAA5B,EAAiC,UAAjC;AACA,WAAO,KAAP,CAAa,OAAO,OAAP,CAAe,IAA5B,EAAkC,OAAlC;AACA,IAXD,EAWG,GAXH,CAWO,MAAM;AACZ;AACA,IAbD;AAcA,GAnBD;AAoBA,EAhCD;AAkCA,CA/DD","file":"product-tests-compiled.js","sourcesContent":["'use strict';\n\nlet assert     = require('assert');\nlet express    = require('express');\nlet superagent = require('superagent');\nlet wagner     = require('wagner-core');\n\nconst URL_ROOT = 'http://localhost:3000';\n\ndescribe('Product API', () => {\n\tlet server;\n\tlet Product;\n\n\tbefore(() => {\n\t\tlet app = express();\n\n\t\t// Bootstrap the Server\n\t\tlet models = require('../models/models')(wagner);\n\t\tapp.use(require('../api')(wagner));\n\t\tserver = app.listen(3000);\n\n\t\t// Make Category model available in tests.\n\t\tProduct  = models.Product;\n\t});\n\n\tafter(() => {\n\t\t// Shut the server down when we're done.\n\t\tserver.close();\n\t});\n\n\tbeforeEach((done) => {\n\t\t// Make sure Categories are empty before each test.\n\t\tProduct.remove({}, (err) => {\n\t\t\tassert.ifError(err);\n\t\t\tdone();\n\t\t});\n\t});\n\n\tit('can load a product by id', (done) => {\n\t\t// Create a single Product\n\t\tconst PRODUCT_ID = '000000000000000000000001';\n\t\tlet product = {\n\t\t\tname: 'LG G4',\n\t\t\t_id: PRODUCT_ID,\n\t\t\tprice: {\n\t\t\t\tamount: 300,\n\t\t\t\tcurrency: 'USD'\n\t\t\t}\n\t\t};\n\n\t\tProduct.create(product, (error, doc) => {\n\t\t\tassert.ifError(error);\n\n\t\t\tlet url = `${URL_ROOT}/product/id/${PRODUCT_ID}`;\n\n\t\t\tsuperagent.get(url, (error, res) => {\n\t\t\t\tassert.ifError(error);\n\n\t\t\t\tlet result;\n\t\t\t\tassert.doesNotThrow(() => {\n\t\t\t\t\tresult = JSON.parse(res.text);\n\t\t\t\t});\n\n\t\t\t\tassert.ok(result.product);\n\t\t\t\tassert.equal(result.product._id, PRODUCT_ID);\n\t\t\t\tassert.equal(result.product.name, 'LG G4');\n\t\t\t}).end(() => {\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n});"]}