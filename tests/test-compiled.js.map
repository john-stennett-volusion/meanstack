{"version":3,"sources":["test.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,MAAM,QAAQ,WAAR,CAAV;AACA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,aAAa,QAAQ,YAAR,CAAjB;;AAEA,SAAS,cAAT,EAAyB,MAAM;AAC9B,KAAI,MAAJ;;AAEA,YAAW,MAAM;AAChB,WAAS,MAAM,MAAN,CAAa,IAAb,CAAT;AACA,EAFD;;AAIA,WAAU,MAAM;AACf,SAAO,KAAP;AACA,EAFD;;AAIA,IAAG,gDAAH,EAAsD,IAAD,IAAU;AAC9D,aAAW,GAAX,CAAe,wBAAf,EAAyC,CAAC,GAAD,EAAM,GAAN,KAAc;AACtD,UAAO,OAAP,CAAe,GAAf;AACA,UAAO,KAAP,CAAa,IAAI,MAAjB,EAAyB,GAAzB;AACA,UAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,eAAvB;AACA,GAJD;AAKA;AACA,EAPD;;AASA,IAAG,oEAAH,EAA0E,IAAD,IAAU;AAClF,aAAW,GAAX,CAAe,sCAAf,EAAuD,CAAC,GAAD,EAAM,GAAN,KAAc;AACpE,UAAO,OAAP,CAAe,GAAf;AACA,UAAO,KAAP,CAAa,IAAI,UAAjB,EAA6B,GAA7B;AACA,UAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,+CAAvB;AACA,GAJD;AAKA;AACA,EAPD;;AASA,IAAG,kDAAH,EAAwD,IAAD,IAAU;AAChE,aAAW,GAAX,CAAe,oDAAf,EAAqE,CAAC,GAAD,EAAM,GAAN,KAAc;AAClF,UAAO,OAAP,CAAe,GAAf;AACA,UAAO,KAAP,CAAa,IAAI,UAAjB,EAA6B,GAA7B;AACA,UAAO,KAAP,CAAa,IAAI,IAAjB,EAAuB,4CAAvB;AACA,GAJD;AAKA;AACA,EAPD;AAQA,CArCD","file":"test-compiled.js","sourcesContent":["'use strict';\n\nlet app = require('../server');\nlet assert = require('assert');\nlet superagent = require('superagent');\n\ndescribe('server tests', () => {\n\tlet server;\n\n\tbeforeEach(() => {\n\t\tserver = app().listen(3000);\n\t});\n\n\tafterEach(() => {\n\t\tserver.close();\n\t});\n\n\tit('print out \"Hello World!\" when user goes to \"/\"', (done) => {\n\t\tsuperagent.get('http://localhost:3000/', (err, res) => {\n\t\t\tassert.ifError(err);\n\t\t\tassert.equal(res.status, 200);\n\t\t\tassert.equal(res.text, \"Hello, World!\");\n\t\t});\n\t\tdone();\n\t});\n\n\tit('print out the user name in the string and undefined for the option', (done) => {\n\t\tsuperagent.get('http://localhost:3000/users/mongoose', (err, res) => {\n\t\t\tassert.ifError(err);\n\t\t\tassert.equal(res.statusCode, 200);\n\t\t\tassert.equal(res.text, \"Page for user mongoose with option undefined.\");\n\t\t});\n\t\tdone();\n\t});\n\n\tit('print out the user name and option in the string', (done) => {\n\t\tsuperagent.get('http://localhost:3000/users/mongoose?option=banana', (err, res) => {\n\t\t\tassert.ifError(err);\n\t\t\tassert.equal(res.statusCode, 200);\n\t\t\tassert.equal(res.text, \"Page for user mongoose with option banana.\");\n\t\t});\n\t\tdone();\n\t});\n});"]}